<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yuanjun&#39;sBlog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>May the odds be ever in your favor</description>
    <pubDate>Thu, 14 Jul 2022 00:24:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>pytorch的VOC_data处理代码</title>
      <link>http://example.com/2022/07/13/pytorch_data_util/</link>
      <guid>http://example.com/2022/07/13/pytorch_data_util/</guid>
      <pubDate>Wed, 13 Jul 2022 13:40:25 GMT</pubDate>
      
      <description>&lt;p&gt;本文介绍的是一些关于pytorch中VOC的数据的处理&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本文介绍的是一些关于pytorch中VOC的数据的处理</p><span id="more"></span><hr><h2 id="一-图片是网上爬虫下载下来的，但是已经对图片标注了，对JPEGImgae和Annotation进行相应的重命名"><a href="#一-图片是网上爬虫下载下来的，但是已经对图片标注了，对JPEGImgae和Annotation进行相应的重命名" class="headerlink" title="一.图片是网上爬虫下载下来的，但是已经对图片标注了，对JPEGImgae和Annotation进行相应的重命名"></a>一.图片是网上爬虫下载下来的，但是已经对图片标注了，对JPEGImgae和Annotation进行相应的重命名</h2><pre><code>github代码:https://github.com/yuanjun0416/pytorch_basic_operation/blob/main/VOC_data_processing/rename_data.py</code></pre><hr><h2 id="二-是对上面一的补充，由于网上爬虫的图片和标注过的信息经过rename-data-py后，annotation中的filename和path还未改变，需对其进行重写"><a href="#二-是对上面一的补充，由于网上爬虫的图片和标注过的信息经过rename-data-py后，annotation中的filename和path还未改变，需对其进行重写" class="headerlink" title="二.是对上面一的补充，由于网上爬虫的图片和标注过的信息经过rename_data.py后，annotation中的filename和path还未改变，需对其进行重写"></a>二.是对上面一的补充，由于网上爬虫的图片和标注过的信息经过rename_data.py后，annotation中的filename和path还未改变，需对其进行重写</h2><pre><code>github代码：https://github.com/yuanjun0416/pytorch_basic_operation/blob/main/VOC_data_processing/rename_data_xml.py</code></pre>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/pytorch/">pytorch</category>
      
      <category domain="http://example.com/categories/pytorch/VOC-data-util/">VOC_data_util</category>
      
      
      <category domain="http://example.com/tags/pytorch/">pytorch</category>
      
      <category domain="http://example.com/tags/VOC/">VOC</category>
      
      
      <comments>http://example.com/2022/07/13/pytorch_data_util/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>blog使用简介</title>
      <link>http://example.com/2022/07/13/blog_use/</link>
      <guid>http://example.com/2022/07/13/blog_use/</guid>
      <pubDate>Wed, 13 Jul 2022 09:09:22 GMT</pubDate>
      
      <description>&lt;p&gt;本blog解决的是如何使用blog的方法&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本blog解决的是如何使用blog的方法</p><span id="more"></span><h2 id="一、更新blog"><a href="#一、更新blog" class="headerlink" title="一、更新blog"></a>一、更新blog</h2><pre><code>按照下列的指令来hexo cleanhexo ghexo d</code></pre>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/blog/">blog</category>
      
      
      <category domain="http://example.com/tags/blog/">blog</category>
      
      
      <comments>http://example.com/2022/07/13/blog_use/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pytorch的一些函数的运用</title>
      <link>http://example.com/2022/07/10/pytorch_fun/</link>
      <guid>http://example.com/2022/07/10/pytorch_fun/</guid>
      <pubDate>Sun, 10 Jul 2022 15:40:15 GMT</pubDate>
      
      <description>&lt;p&gt;本文介绍的是一些关于pytorch中最基本的一些函数运用&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本文介绍的是一些关于pytorch中最基本的一些函数运用</p><span id="more"></span><h2 id="pytorch中item-的用法"><a href="#pytorch中item-的用法" class="headerlink" title="pytorch中item()的用法"></a>pytorch中item()的用法</h2><pre><code>item()是得到一个元素张量里的元素值如下面的代码示例：accuracy = torch.eq(predict_y, test_label).sum().item()/test_label.size(0) #item()是得到元素张量里的元素值代码GitHub地址：https://github.com/yuanjun0416/deep_learning_process/Test1_official_demo.git</code></pre><h2 id="pytorch中torchvision-is-tracing-的使用简介"><a href="#pytorch中torchvision-is-tracing-的使用简介" class="headerlink" title="pytorch中torchvision._is_tracing()的使用简介"></a>pytorch中torchvision._is_tracing()的使用简介</h2><pre><code>github:https://github.com/yuanjun0416/deep-learning-for-image-processing/blob/master/pytorch_object_detection/faster_rcnn/network_files/transform.pypage:108这是对 torch._C._get_tracing_state() 的内部调用，用于检查您当前是否正在尝试使用 JIT 跟踪模型。它在内部用于例如 对当前不支持跟踪的方法使用变通方法。</code></pre>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/pytorch/">pytorch</category>
      
      
      <category domain="http://example.com/tags/pytorch/">pytorch</category>
      
      
      <comments>http://example.com/2022/07/10/pytorch_fun/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>github使用方法</title>
      <link>http://example.com/2022/07/10/github_use/</link>
      <guid>http://example.com/2022/07/10/github_use/</guid>
      <pubDate>Sun, 10 Jul 2022 14:51:12 GMT</pubDate>
      
      <description>&lt;p&gt;本文解决的是如何使用github的方法&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本文解决的是如何使用github的方法</p><span id="more"></span><h2 id="一、github如何更新已经上传了的文件"><a href="#一、github如何更新已经上传了的文件" class="headerlink" title="一、github如何更新已经上传了的文件"></a>一、github如何更新已经上传了的文件</h2><pre><code>按照下列的指令来git add .git commit -m &quot;这是注释内容&quot;git pull origin main #main在这里表示的是github的branchgit push -u origin main</code></pre><hr><h2 id="二、github如何上传文件"><a href="#二、github如何上传文件" class="headerlink" title="二、github如何上传文件"></a>二、github如何上传文件</h2><pre><code>按照下列的指令来git initgit add .git branch main -Mgit remote add origin git@github.com:yuanjun0416/deep_learning_processing.gitgit commit -m &quot;注释内容（此处写本次干了什么事）&quot;git push -u origin main</code></pre><hr><h2 id="三、clone-github上仓库中的某个子文件夹"><a href="#三、clone-github上仓库中的某个子文件夹" class="headerlink" title="三、clone github上仓库中的某个子文件夹"></a>三、clone github上仓库中的某个子文件夹</h2><pre><code>现在有一个ssh:git@github.com:yuanjun0416/deep-learning-for-image-processing.git仓库中有一个子文件夹pytorch_object_detection/faster_rcnn形似：deep-learning-for-image-processing/pytorch_object_detection/faster_rcnn按照下列的指令来git init //初始化git config core.sparsecheckout true //设置允许克隆子目录 git &#39;pytorch_object_detection/faster_rcnn*&#39; &gt;&gt; .git/info/sparse-checkout //设置要克隆的仓库的子目录路径git remote add origin git@github.com:yuanjun0416/deep_learning_processing.git  //仓库名称git pull origin master //branch为master就是master,为main就是main</code></pre>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/github/">github</category>
      
      
      <category domain="http://example.com/tags/github/">github</category>
      
      
      <comments>http://example.com/2022/07/10/github_use/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pytorch中可能遇到的问题</title>
      <link>http://example.com/2022/07/09/pytorch_trouble/</link>
      <guid>http://example.com/2022/07/09/pytorch_trouble/</guid>
      <pubDate>Sat, 09 Jul 2022 14:14:50 GMT</pubDate>
      
      <description>&lt;p&gt;本文主要介绍pytorch中运行的一些疑惑问题&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>本文主要介绍pytorch中运行的一些疑惑问题</p><span id="more"></span><pre><code>代码详细链接：https://github.com/yuanjun0416/deep_learning_process/Test1_official_demo.git</code></pre><h2 id="问题一：如何理解transform-Normlize-0-5-0-5-0-5-0-5-0-5-0-5"><a href="#问题一：如何理解transform-Normlize-0-5-0-5-0-5-0-5-0-5-0-5" class="headerlink" title="问题一：如何理解transform.Normlize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))"></a>问题一：如何理解transform.Normlize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))</h2><p>答：前面的(0.5, 0.5, 0.5)是RGB三个通道上的均值，后面的(0.5, 0.5, 0.5)是RGB三个通道的标准差</p><pre><code>Normlize对每个通道执行一下操作：image_output = (image_input-mean)/std，参数mean和std分别以0.5和0.5的形式传递，这将使图像在[-1, 1]范围内归一化。例如：最小值0：image_output = (0-0.5)/0.5 = -1 ...&#39;注意:通道顺序是RGB，用过openCV的同学应该知道openCV读出来的图像是BGR顺序。这两个tuple数据是用来对RGB图像做归一化的，比如名称Normlize所示这里都取0.5只是一个近似操作，实际上均值和方差并不是这么多，但是就这个示例而言，影响可不计精确值是通过分别计算R、G、B三个通道的数据算出来的，比如由两张图片，都是100*100大小的，R：那么两图片的像素点共有2*100*100=20000个，那么这两张图片的1. mean求法：mean_R: 这20000个像素点的R值加起来，除以像素点的总数，这里是20000；mean_G 和mean_B 两个通道的计算方法一样的。2. std求法：首先标准差就是开了方的方差，所以其实就是求方差，方差公式就是我们数学上的那个求方差的公式：也是3个通道分开算比如算R通道的， 这里X就为20000个像素点各自的R值，再减去R均值，上面已经算好了；然后平方；然后20000个像素点相加，然后求平均除以20000，得到R的方差，再开方得标准差。注意！！！如果你用的是自己创建的数据集，从头训练，那最好还是要自己统计自己数据集的这两个量你加载的的是pytorch上的预训练模型，自己只是微调模型；或者你用了常见的数据集比如VOC或者COCO之类的，但是用的是自己的网络结构，即pytorch上没有可选的预训练模型那么可以使用一个pytorch上给的通用的统计值：mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225]),即transform.Normlize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))&#39;</code></pre><h2 id="问题二：如何理解-predict-y-x3D-torch-max-outputs-dim-x3D-1-1-中的含义"><a href="#问题二：如何理解-predict-y-x3D-torch-max-outputs-dim-x3D-1-1-中的含义" class="headerlink" title="问题二：如何理解 predict_y &#x3D; torch.max(outputs, dim&#x3D;1)[1]中的含义"></a>问题二：如何理解 predict_y &#x3D; torch.max(outputs, dim&#x3D;1)[1]中的含义</h2><p>答：我们将此代码拆分一下 preidct &#x3D; torch.max(outputs, dim&#x3D;1) + predict_y &#x3D; preidct[1]</p><pre><code>我们先简单看下列的代码import torchx = torch.rand([2, 4])y = torch.max(x, dim=1)[1]output:tensor([[0.4051, 0.1194, 0.7286, 0.8642, 0.5800, 0.0584, 0.2084, 0.4634, 0.3979,     0.6835],    [0.1506, 0.6964, 0.6613, 0.9141, 0.9811, 0.8798, 0.3690, 0.7334, 0.3589,     0.5195]])tensor([3, 4]) 很明显x的最大值的索引下标分别是第一行的3，即0.8642，第二行的是4，即0.9811import torchx = torch.rand([2, 4])y = torch.max(x, dim=1)output:(由于x是随机赋值的，所以最大值的地方不一样)tensor([[0.2006, 0.0117, 0.6692, 0.8162, 0.5893, 0.5370, 0.1080, 0.8149, 0.1185,     0.2816],    [0.8734, 0.2172, 0.9733, 0.4813, 0.1112, 0.7972, 0.3073, 0.3147, 0.3988,     0.3342]])torch.return_types.max(values=tensor([0.8162, 0.9733]),indices=tensor([3, 2]))很明显 y[1] = tensor([3, 2])</code></pre>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/pytorch/">pytorch</category>
      
      <category domain="http://example.com/categories/pytorch/Test1-official-demo/">Test1_official_demo</category>
      
      
      <category domain="http://example.com/tags/pytorch/">pytorch</category>
      
      
      <comments>http://example.com/2022/07/09/pytorch_trouble/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2022/07/09/hello-world/</link>
      <guid>http://example.com/2022/07/09/hello-world/</guid>
      <pubDate>Sat, 09 Jul 2022 10:03:43 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/07/09/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
